<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V5.0//EN" "http://docbook.org/xml/5.0/dtd/docbook.dtd">
<book lang="en">
	<bookinfo>
		<title>CaverAnalyst</title>
		<!--<subtitle>Color schemes and global configuration</subtitle>-->
		<author>
			<firstname>Henrich</firstname>
			<surname>Lauko</surname>
		</author>
		<author>
			<firstname>Jan</firstname>
			<surname>Štourač</surname>
		</author>
		<author>
			<firstname>Jiří</firstname>
			<surname>Novotný</surname>
		</author>
		<author>
			<firstname>Karel</firstname>
			<surname>Kubíček</surname>
		</author>
	</bookinfo>
	<preface>
		<title>Introduction</title>
		<para>This project for PB138 Modern Markup Languages and Their Applications is part of project Caver developed in Human Computer Interaction Laboratory. Our goal was to rebuild module Color, which is responsible for visualization of molecules using xml configuration files.</para>
		<section>
			<title>About Caver</title>
			<para>CAVER project aims to provide biochemists with easy-to-use tool for protein analysis, visualization and further evaluation of results.</para>
			<para>The main feature of the application is computation of tunnels in proteins. Tunnels are pathways leading from the outer environment to a specific site deeply buried inside protein. This site is called a binding (or active) site and atoms around this site are able to react and bind with other structures. Thus tunnels are utilized for transporting small molecules of substrate (ligands, ions) into the active site where a chemical reaction can be performed and products of such reaction are again transported out of the protein via tunnels and can form a basis of new medications or other important chemical compounds.</para>
			<para>Computation of tunnels and analysis of their bottlenecks (e.g. the narrowest site of the tunnel) can predict if a substrate can follow these tunnels and get to the active site. If not, these cases do not have to be studied in laboratories which substantially decreases the time spent in labs on experiments with impossible cases.</para>
			<para>(Taken from official Caver wiki)</para>
		</section>
	</preface>
	<chapter>
		<title>Project process</title>
		<itemizedlist>
			<listitem>21. 3. - Meeting with CAVER team - Discussion about posible XML developements in CAVER, decomposition of assigments to team members</listitem>
			<listitem>22. 3. - 20. 4. - Project developement Intensive work on assigments on by own, with small meetings on problems that occurs during developement. Making small chcanges to first scheme of project to improve usability.</listitem>
			<listitem>21. 4. - 4. 5. - Debugging and testing - Finalizing project development and fixing bugs.</listitem>
			<listitem>5. 4. - 22. 5. - Documentation and presentation - Finishing documentation, wiki and preparing presentation.</listitem>
			<listitem>22. 5. - Project presentation and end of development.</listitem>

		</itemizedlist>
	</chapter>
	<chapter>
		<title>Assigment characterization</title>
		<itemizedlist>
			<listitem>Color schemes GUI
				<itemizedlist>
					<listitem>implemented by Henrich Lauko</listitem>
					<listitem>Work included GUI blueprint</listitem>
					<listitem>Implementation of package com.caver.controller.selection.color - used for user control of color schemes</listitem>
					<listitem>Implementation of package com.caversoft.color.gui - used for coloring panels and dialogs</listitem>
					<listitem>Implementation of import and export of user color schemes</listitem>
				</itemizedlist>
			</listitem>

			<listitem>Color schemes backend
				<itemizedlist>
					<listitem>Implemented by Jan Štourač</listitem>
					<listitem>Unified interface for access to color schemes</listitem>
					<listitem>Only one manager for the whole application</listitem>
					<listitem>Can notify listeners about changes in color schemes</listitem>
					<listitem>Implementation of class com.caversoft.color.ColorSchemeManager – manager of color schemes</listitem>
					<listitem>Implementation of class com.caversoft.color.ColorSchemelistener – listener for notifications</listitem>
				</itemizedlist>
			</listitem>

    	<listitem>Color schemes XML structure and xsd
				<itemizedlist>
					<listitem>Implemented by Karel Kubíček</listitem>
					<listitem>Create xsd for color schemes used in verification of correct import and export</listitem>
					<listitem>Create structure of xml for efficient storing of color schemes containing:
						<itemizedlist>
							<listitem>Definition of coloring strategy in each color scheme</listitem>
							<listitem>Definition of default color schemes and user color schemes</listitem>
							<listitem>Storing informatiopn of colorin channels</listitem>
						</itemizedlist>
					</listitem>
				</itemizedlist>
			</listitem>

    	<listitem>Global settings
				<itemizedlist>
					<listitem>implemented by Jiří Novotný</listitem>
					<listitem>refactor, remake and fix existing service responsible for global settings</listitem>
					<listitem>fix existing bugs
						<itemizedlist>
							<listitem>resolve charset problem with settings</listitem>
							<listitem>resolve uninteded overwriting of setting values</listitem>
							<listitem>resolve conficts in setting identifiers</listitem>
						</itemizedlist>
					</listitem>
					<listitem>make better loading and storing of settings from/to xml document</listitem>
					<listitem>make xsd specification to xml file containing settings</listitem>
				</itemizedlist>
			</listitem>
		</itemizedlist>
	</chapter>
	<chapter id="Color Schemes GUI">
		<title>Graphical user interface</title>
		<para> Grafical user interface was designed for the intuitive work with color schemes. From start interface had to have following functions:
		<itemizedlist>
			<listitem>simple color changes</listitem>
			<listitem>intuitive work with atoms, tunnels, selections</listitem>
			<listitem>color schemes modification</listitem>
			<listitem>import/export of scolor schemes</listitem>
			<listitem>extensibility of other coloring techniques</listitem>
		</itemizedlist>
		All of this points were considered in designing of pannels. And GUI was formed to accomplish every of them in the way of simple and effective implementation behind of user interface.
		</para>
		<para>
		Panel interface is divided in to more pannels, which are grouped defaultly in the right slope of the screen. Each of the panels meets the functionality of different coloring. Our project involves only 3 panels. Structure panel, which describes coloring of whole structure, and gives functionality to modify color schemes. Selection panel reduce color schemes application only on selected atoms. And last panel is used to modify background of scene. Currently there is developement on tunnel coloring panel, which extends funtionality on coloring tunnels in structure.
		</para>
		<para>
		In actual form of panels gives options to edit colors of specified atoms. Color schemes are hold in the application in the form of XML document, where each scheme holds information whether it is user defined scheme or default Caver Analyst scheme. Inteface refuses to give permission to modify default schemes in order to maintain the consistence of schemes through the applications.
		</para>
		<para>
		Other main funcion of panels is to export and import schemes, where each user scheme can be exported into xml file and edited outside of the application. In order to preserve persistence of imported scheme data they are controlled agaist xsd scheme, which is publicly published on Caver Analyst web sites. In the situation that the user is importing schemes with same names as there are in the current application, user will be asked whether he would like to overwrite the schemes. If there occur a conflict between default scheme and imported scheme application refuses to import scheme and informs user about the problem.
		</para>
		<para>
		Current import/export should give ability to maintain color schemes through larger projects, chemistry laboratories and scientific magazines.
		</para>
		<figure>
		<title>Default Caver Analyst user interface</title>
			<imageobject>
				<imagedata fileref="caver.png" width="6in" align="center" />
			</imageobject>
		</figure>
		<para>
		In the implementation the main problem was to design maintenance of the schemes through all of the panels. The problem was to refresh all panels when user chcanges scheme, that was load to more panels. Problem was solved simply with global scheme manager and listeners, which maintains all panels in actualized state. The solution is further described in backend documentation.
		</para>
		<para>
		In order to maintain refactored and reusable code there was created DefaultColoringPanel, from which inherite all other ColoringPanels. Where every panel holds information about specific coloring strategies and color schemes assigned to them.
		</para>
		<para>
		Other componnents that GUI contains are save dialogs, color choosers and import/eport file choosers. The functionality of these windows was kept to lowest complexity to guarantee userfriendlines a effectivenes.
		</para>
	</chapter>
	<chapter id="Color Schemes backend">
		<title>Backend</title>
		<para>Main requirements for the color schemes backend were
		<itemizedlist>
			<listitem>straightforward and easy access to all color schemes in application</listitem>
			<listitem>good public API</listitem>
			<listitem>possibility of reimplementation of scheme manager without changes in other code</listitem>
			<listitem>same color schemes in the whole application</listitem>
			<listitem>support for user defined color schemes</listitem>
		</itemizedlist>
		These requirements were kept in mind during development process. The basic component of color scheme management is class <code>ColorSchemeManager</code>.
		</para>
		<section>
		  <title>ColorSchemeManager</title>
		  <para>
		    This class serves as the main entrance to the color scheme management. It provides the complete public API for other components of the application, so for basic usage it is not neccessary to understand whole concept beyond color schemes. It is also implemented as <emphasis>singleton</emphasis> so there is only one manager for the application. This makes synchronization in case of change much easier and can prevent conflicts due to concurrent modification. ColorSchemeManager is mainly responsible for:
		    <itemizedlist>
		      <listitem>correct loading of system and user color schemes during application startup</listitem>
		      <listitem>access to all available color schemes</listitem>
		      <listitem>save/delete/update of user defined color schemes</listitem>
		      <listitem>automatic saving of user schemes to file after change</listitem>
		      <listitem>correct import/export of user schemes on demand</listitem>
		    </itemizedlist>
		  </para>
		  <para>
		    One feature of manager is also supports for event when color scheme is created, modified or deleted. When something happens, listening components of application get notification about the change. This makes cooperation with the rest of application (especially GUI) much more easier. Listener is available as class <code>ColorSchemeListener</code>.
		  </para>
		</section>
		<section>
		  <title>ColorScheme</title>
		  <para>
				This class represents one color scheme. It is designed to be immutable - because of possible problems witch change propagation through the app. ColorScheme concept is built on color differences. Each scheme can have one ancestor (usually default scheme for strategy and type) which provides all possible colors. The scheme itself keeps only differences against ancestor. This brings better management of schemes and lower memory consumption. But from the view of user the color scheme provides all colors together, so there should not be a problem with usability [fig. 4.1].
		  </para>
		  <figure id="origin">
				<title>Colors origin</title>
				<imageobject>
					<imagedata fileref="colorscheme.png" width="4in" align="center" />
				</imageobject>
			</figure>
		</section>
	</chapter>
	<chapter>
		<title>XSD scheme</title>
		<para>File <code>colorSchemes.xsd</code> in <code>caver_analyst/color/resources.xml</code> is responsible for correct save and load operation for settings of coloring of molecule. Settings are available as coloring strategy and allows to color each element, group of elements or structures by electric charge and so.</para>
		<para>User can use default color scheme, or can create his own. If he do so, we save just differences between default and user color scheme, which saves resources and also time, that would be consumed by creating whole new color scheme (user often wants to change just one thing to highlight one studied property).</para>
		<para>Using XML for saving user color scheme also increase user friendliness of application. It's simpler to create new color scheme, and if you obtain interesting information, you can send colorSchemes.xml to other researchers to share, what have you seen.</para>
		<para>File colorSchemes.xml contains these xml elements:
			<itemizedlist>
				<listitem>
					<simpara><code><![CDATA[<root>]]></code> with attribute of its xsd file for verification. It has to contain at least 1 element <code><![CDATA[<scheme>]]></code></simpara>
				</listitem>
				<listitem><code><![CDATA[<scheme>]]></code> with attributes "type", "strategy" and "name". Attribute "type" is of type string and could contain only values enumerated in xs:simpleType "schemeType".</listitem>
			</itemizedlist>
		</para>
		<para>Attribute "strategy" is defined analogously as "type" and has its simple type "schemeStrategy". Attribute "name" speaks for itself. Users could create their own schema, which leads to creation of new tag <code><![CDATA[<scheme>]]></code> with selected type, strategy and name.</para>
		<para>Each element <code><![CDATA[<scheme>]]></code> contains at least one element <code><![CDATA[<color>]]></code>. It has 4 attributes, each is required. First attribute "id" contains number of element or group of elements and is unique in <code><![CDATA[<scheme>]]></code>. Three others attributes represents RGB coloring of element. For each channel value 0 to 1 is allowed. Usually written with precision on 3 digits, but it is not strict.</para>
		<para>Short sample of default scheme XML:
<screen><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<!--
	Document   : colorSchemes.xml
	Description: Native color schemes.
-->
<root xsi:noNamespaceSchemaLocation="company.xsd">
	<scheme type="Atoms" strategy="Atom element" name="Default">
		<color id="1" R="0.900" G="0.900" B="0.900"/>
		<color id="2" R="0.851" G="1.000" B="1.000"/>
	</scheme>
	<scheme type="Residues" strategy="Residue type" name="Default" >
	</scheme>
	<scheme type="Chains" strategy="Chain identifier" name="Default" >
	</scheme>
	<scheme type="Secondary structures" strategy="Secondary structure type" name="CMY">
	</scheme>
</root>
]]></screen></para>
		<para>Besides the fact, that XSD file for validation is very strict, there is simple possibility of introduction new possibilities for coloring scheme. It is also allowed by documentation of XSD file, which is not so difficult to understand and extend. But actual version allows user many things, which can last sufficient for long time.</para>

	</chapter>
	<chapter id="configuration">
		<title>Configuration module</title>
		<para>The Caver Analyst is an application based of a modular design. One of these modules, specifically the Configuration module, is, responsible for all application global settings. These settings are then stored into an XML file and preserved across multiple launches of the application. The XML file is located in user home directory, so the settings stored are user specific. In other words, every module can store some data thought Configuration module under some identifier and then access them, when the application restarts.</para>
		<para>The previous version of this module had several problems.  There was a few design issues and several implementation issues.  In my work a I have had to do some reinventing of module behavior in order to fix these issues.</para>
		<para>The first issue was concerned about unintended overwriting of settings values, that had been recovered from the XML file. In original design in order to store a data you have had to call introduceParameter method and than setParameter method. The fist method reserved the data identifier in order to prevent identifier conflicts between other modules. If there was a conflict the exception has been thrown. If not the default value has been stored. These behavior resulted in overwriting the setting recovered from XML file to default values.</para>
		<para>I have removed the conflict checking (because it is basically a code written by a programmer against the programmers performed at run-time), changed the behavior of introduceParametr to only if there is no parameter present then create one and set its value to default.</para>
		<para>The second issue involved misinterpretation of some characters in the XML settings file when it was opened by a browser.  It has shown up, that even if the document was in valid UTF-8 form, the missing XML header with proper charset definition was responsible for it. I fixed it by adding the XML header each time, when output of the settings to the file was performed.</para>
		<para>In order to make the XML file XSD 1.0 compatible and to provide checking of uniqueness of setting keys, the basic structure of the XML file had to be changed. The original XML file, generated by om.thoughtworks.xstream package, had each record of settings stored as:
		<screen><![CDATA[
<entry>
	<string>key</string>
	<”data-type”>value</”data-type”>   <!-- “data-type” is an arbitrary java class name -->
</entry>]]></screen>
		</para>
		<para>XSD 1.0 do not permits XPath predicates in key definition and in the old layout was the key stored in the first <code><![CDATA[<string>]]></code> element of <code><![CDATA[<entry>]]></code> sequence (the <code><![CDATA[<“data-type”>]]></code> element could be also a <code><![CDATA[<string>]]></code>).</para>
		<para>The com.thoughtworks.xstream package automates the serialization of java objects to an XML form. It provides an API to create a template for “how each java class will by serialized”, so the structure of generated XML can by easily changed. The new structure of the settings XML file is:
<screen><![CDATA[
<entry key=”key”>
	<”data-type”>value</”data-type”>
</entry>]]></screen>
		</para>
		<para>This corrected structure allows to be XSD 1.0 specification created and to check the uniqueness of the keys.</para>
		<para>In the final stage the XSD to XML settings file generated by Configuration module was made.</para>
	</chapter>
	<chapter id="contributions">
		<title>Contributions</title>
		<para>List of commits made to project svn repository by our team:
		    <screen> <![CDATA[
r1558 | xlauko1 | 2014-05-20 23:15:06 +0200 (Tue, 20 May 2014) | 1 line

color Javadoc comments
------------------------------------------------------------------------
r1549 | xnovot31 | 2014-05-17 04:58:04 +0200 (Sat, 17 May 2014) | 1 line

Bugfix related to rev. 1534 - Renderer - Gizmo transformation was causing
unwanted camera rotation.
------------------------------------------------------------------------
r1534 | xnovot31 | 2014-05-12 10:37:42 +0200 (Mon, 12 May 2014) | 1 line

New version of ClipPlane module added and integrated with Renderer.
------------------------------------------------------------------------
r1525 | xstoura1 | 2014-05-07 23:25:11 +0200 (Wed, 07 May 2014) | 2 lines

New method for acquiring existing color scheme.

------------------------------------------------------------------------
r1524 | xlauko1 | 2014-05-07 23:13:56 +0200 (Wed, 07 May 2014) | 1 line

Import dialog
------------------------------------------------------------------------
r1521 | xstoura1 | 2014-05-07 11:51:07 +0200 (Wed, 07 May 2014) | 2 lines

Added first support for XSD in color schemes XML files.

------------------------------------------------------------------------
r1496 | xlauko1 | 2014-04-29 15:12:01 +0200 (Tue, 29 Apr 2014) | 1 line

coloring panel oprava
------------------------------------------------------------------------
r1488 | xlauko1 | 2014-04-28 16:58:50 +0200 (Mon, 28 Apr 2014) | 1 line

Import Export of color schemes
------------------------------------------------------------------------
r1487 | xnovot31 | 2014-04-27 23:12:35 +0200 (Sun, 27 Apr 2014) | 1 line

Configuration module: Added xsd specification to settings.xml
------------------------------------------------------------------------
r1486 | xnovot31 | 2014-04-27 23:07:53 +0200 (Sun, 27 Apr 2014) | 1 line

Updated Configuration module. Changed internal design of settings.xml located
in CAVER_HOME_DIR/settings directory. After this update maybe it is necessary
to delete the xml file (by default it is located in /~/Caver/settings/settings.xml).
------------------------------------------------------------------------
r1452 | xstoura1 | 2014-04-08 23:13:02 +0200 (Tue, 08 Apr 2014) | 2 lines

Add support for listener of saved/removed event in ColorSchemeManager.

------------------------------------------------------------------------
r1450 | xstoura1 | 2014-04-08 22:29:55 +0200 (Tue, 08 Apr 2014) | 2 lines

Removed unnecessary form XMLs.

------------------------------------------------------------------------
r1449 | xstoura1 | 2014-04-08 22:28:01 +0200 (Tue, 08 Apr 2014) | 2 lines

Color schemes extracted from controller to own service. Color is immutable.
DefaultColoringPanel - remove code duplication.

------------------------------------------------------------------------
r1442 | xnovot31 | 2014-04-02 15:08:25 +0200 (Wed, 02 Apr 2014) | 1 line

Configuration - added XML header to setting.xml
------------------------------------------------------------------------
r1439 | xlauko1 | 2014-04-01 19:26:00 +0200 (Tue, 01 Apr 2014) | 1 line

sellection coloring panel funkcionalita
------------------------------------------------------------------------
r1438 | xnovot31 | 2014-04-01 18:05:57 +0200 (Tue, 01 Apr 2014) | 1 line


------------------------------------------------------------------------
r1435 | xstoura1 | 2014-04-01 01:31:46 +0200 (Tue, 01 Apr 2014) | 2 lines

Updated version of user color schemes support. New utility class for XML.

------------------------------------------------------------------------
r1429 | xlauko1 | 2014-03-30 09:57:46 +0200 (Sun, 30 Mar 2014) | 1 line

color scheme exception added
------------------------------------------------------------------------
r1428 | xstoura1 | 2014-03-28 13:18:26 +0100 (Fri, 28 Mar 2014) | 2 lines

Finished implementation of support for user defined color schemes.

------------------------------------------------------------------------
r1425 | xlauko1 | 2014-03-26 23:55:36 +0100 (Wed, 26 Mar 2014) | 1 line

color schemes GUI
------------------------------------------------------------------------
r1424 | xstoura1 | 2014-03-26 22:23:16 +0100 (Wed, 26 Mar 2014) | 2 lines

implementation of support for saving user defined schemes to XML file

------------------------------------------------------------------------
r1423 | xlauko1 | 2014-03-26 21:40:42 +0100 (Wed, 26 Mar 2014) | 1 line

coloring panel incomplete
------------------------------------------------------------------------
r1422 | xlauko1 | 2014-03-26 21:40:03 +0100 (Wed, 26 Mar 2014) | 1 line

color save dialog incomplete
------------------------------------------------------------------------
r1420 | xkubice8 | 2014-03-26 15:03:04 +0100 (Wed, 26 Mar 2014) | 1 line

XSD for coloring schema done
------------------------------------------------------------------------
]]></screen>
      </para>
      <para>Patch for each commit is available on request.</para>
    </chapter>
</book>


